/**
 * Download Invoice Controller Function
 * Generates and downloads invoice PDF for a transaction
 */

const { pool } = require('../../../db/config');
const PDFDocument = require('pdfkit');

/**
 * Generate and download invoice for a transaction
 * @param {import('express').Request} req - Express request object
 * @param {import('express').Response} res - Express response object
 * @returns {Promise<import('express').Response | void>} Invoice PDF download
 */
async function downloadInvoice(req, res) {
    try {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                message: 'Authentication required'
            });
        }
        
        const userId = req.user.id;
        const { transactionId } = req.params;

        if (!transactionId) {
            return res.status(400).json({
                success: false,
                message: 'Transaction ID is required'
            });
        }

        // Get transaction details with user and subscription info
        const transactionQuery = `
            SELECT 
                st.id,
                st.user_id,
                st.subscription_id,
                st.razorpay_payment_id,
                st.razorpay_order_id,
                st.transaction_type,
                st.amount,
                st.tax_amount,
                st.discount_amount,
                st.net_amount,
                st.currency,
                st.status,
                st.method,
                st.description,
                st.receipt_number,
                st.processed_at,
                st.created_at,
                u.first_name,
                u.last_name,
                u.email,
                us.plan_code,
                us.billing_cycle,
                us.current_period_start,
                us.current_period_end
            FROM subscription_transactions st
            JOIN users u ON st.user_id = u.id
            LEFT JOIN user_subscriptions us ON st.subscription_id = us.id
            WHERE st.id = $1 AND st.user_id = $2 AND st.status = 'captured'
        `;
        
        const transactionResult = await pool.query(transactionQuery, [transactionId, userId]);
        
        if (transactionResult.rows.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Transaction not found or access denied'
            });
        }

        const transaction = transactionResult.rows[0];

        // Only allow invoice generation for successful transactions
        if (transaction.status !== 'captured') {
            return res.status(400).json({
                success: false,
                message: 'Invoice can only be generated for successful transactions'
            });
        }

        // Generate PDF invoice
        const doc = new PDFDocument({ margin: 50 });
        
        // Set response headers for PDF download
        const filename = `invoice_${transaction.receipt_number || transactionId}.pdf`;
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        // Pipe PDF to response
        doc.pipe(res);

        // Invoice Header
        doc.fontSize(20).text('INVOICE', 50, 50);
        doc.fontSize(10).text('Generated by BruhMCP', 50, 75);
        
        // Company details (right side)
        doc.fontSize(12)
           .text('BruhMCP Platform', 350, 50)
           .text('MCP Instance Management', 350, 65)
           .text('support@bruhmcp.com', 350, 80);

        // Invoice details
        doc.fontSize(14).text('Invoice Details', 50, 120);
        doc.fontSize(10)
           .text(`Invoice Number: ${transaction.receipt_number || `INV-${transactionId}`}`, 50, 140)
           .text(`Transaction ID: ${transactionId}`, 50, 155)
           .text(`Payment ID: ${transaction.razorpay_payment_id || 'N/A'}`, 50, 170)
           .text(`Date: ${new Date(transaction.processed_at || transaction.created_at).toLocaleDateString('en-IN')}`, 50, 185)
           .text(`Status: ${transaction.status.toUpperCase()}`, 50, 200);

        // Customer details
        doc.fontSize(14).text('Bill To:', 50, 230);
        doc.fontSize(10)
           .text(`${transaction.first_name} ${transaction.last_name}`, 50, 250)
           .text(transaction.email, 50, 265);

        // Subscription details (if available)
        if (transaction.plan_code) {
            doc.fontSize(14).text('Subscription Details:', 350, 230);
            doc.fontSize(10)
               .text(`Plan: ${transaction.plan_code.toUpperCase()}`, 350, 250)
               .text(`Billing: ${transaction.billing_cycle || 'N/A'}`, 350, 265);
            
            if (transaction.current_period_start && transaction.current_period_end) {
                doc.text(`Period: ${new Date(transaction.current_period_start).toLocaleDateString('en-IN')} - ${new Date(transaction.current_period_end).toLocaleDateString('en-IN')}`, 350, 280);
            }
        }

        // Line separator
        doc.moveTo(50, 310).lineTo(550, 310).stroke();

        // Invoice items table header
        doc.fontSize(12).text('Description', 50, 330);
        doc.text('Amount', 450, 330);
        
        // Line separator for table header
        doc.moveTo(50, 345).lineTo(550, 345).stroke();

        // Invoice item
        const description = transaction.description || `${transaction.plan_code ? transaction.plan_code.toUpperCase() + ' Plan' : 'Service'} - ${transaction.billing_cycle || 'Subscription'}`;
        const amount = (transaction.amount / 100).toFixed(2); // Convert paise to rupees
        
        doc.fontSize(10)
           .text(description, 50, 360)
           .text(`₹${amount}`, 450, 360);

        // Tax and discount lines (if applicable)
        let currentY = 380;
        
        if (transaction.discount_amount > 0) {
            const discount = (transaction.discount_amount / 100).toFixed(2);
            doc.text('Discount Applied', 50, currentY)
               .text(`-₹${discount}`, 450, currentY);
            currentY += 20;
        }
        
        if (transaction.tax_amount > 0) {
            const tax = (transaction.tax_amount / 100).toFixed(2);
            doc.text('Tax', 50, currentY)
               .text(`₹${tax}`, 450, currentY);
            currentY += 20;
        }

        // Total line
        doc.moveTo(50, currentY + 10).lineTo(550, currentY + 10).stroke();
        currentY += 25;
        
        const totalAmount = (transaction.net_amount / 100).toFixed(2);
        doc.fontSize(12)
           .text('Total Amount', 50, currentY)
           .text(`₹${totalAmount}`, 450, currentY);

        // Payment method
        currentY += 40;
        doc.fontSize(10)
           .text(`Payment Method: ${transaction.method || 'Card'}`, 50, currentY)
           .text(`Currency: ${transaction.currency}`, 50, currentY + 15);

        // Footer
        doc.fontSize(8)
           .text('Thank you for using BruhMCP!', 50, doc.page.height - 100)
           .text('This is a computer-generated invoice.', 50, doc.page.height - 85)
           .text('For support, contact: support@bruhmcp.com', 50, doc.page.height - 70);

        // Finalize PDF
        doc.end();

    } catch (error) {
        console.error('Download invoice error:', error);
        
        // If response hasn't been sent yet, send error response
        if (!res.headersSent) {
            return res.status(500).json({
                success: false,
                message: 'Failed to generate invoice',
                error: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.message : 'Unknown error') : 'Internal server error'
            });
        }
    } finally {
        console.debug('Download invoice request completed');
    }
}

module.exports = downloadInvoice;