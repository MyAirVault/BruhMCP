import React, { useState, useEffect, useRef } from 'react';
import { ChevronDown } from 'lucide-react';

interface CountryOption {
  value: string;
  label: string;
  flag?: string;
}

interface CountryDropdownProps {
  value: string;
  onChange: (value: string) => void;
  className?: string;
  error?: boolean;
}

const countries: CountryOption[] = [
  { value: 'AF', label: 'Afghanistan', flag: 'ğŸ‡¦ğŸ‡«' },
  { value: 'AL', label: 'Albania', flag: 'ğŸ‡¦ğŸ‡±' },
  { value: 'DZ', label: 'Algeria', flag: 'ğŸ‡©ğŸ‡¿' },
  { value: 'AS', label: 'American Samoa', flag: 'ğŸ‡¦ğŸ‡¸' },
  { value: 'AD', label: 'Andorra', flag: 'ğŸ‡¦ğŸ‡©' },
  { value: 'AO', label: 'Angola', flag: 'ğŸ‡¦ğŸ‡´' },
  { value: 'AI', label: 'Anguilla', flag: 'ğŸ‡¦ğŸ‡®' },
  { value: 'AQ', label: 'Antarctica', flag: 'ğŸ‡¦ğŸ‡¶' },
  { value: 'AG', label: 'Antigua and Barbuda', flag: 'ğŸ‡¦ğŸ‡¬' },
  { value: 'AR', label: 'Argentina', flag: 'ğŸ‡¦ğŸ‡·' },
  { value: 'AM', label: 'Armenia', flag: 'ğŸ‡¦ğŸ‡²' },
  { value: 'AW', label: 'Aruba', flag: 'ğŸ‡¦ğŸ‡¼' },
  { value: 'AU', label: 'Australia', flag: 'ğŸ‡¦ğŸ‡º' },
  { value: 'AT', label: 'Austria', flag: 'ğŸ‡¦ğŸ‡¹' },
  { value: 'AZ', label: 'Azerbaijan', flag: 'ğŸ‡¦ğŸ‡¿' },
  { value: 'BS', label: 'Bahamas', flag: 'ğŸ‡§ğŸ‡¸' },
  { value: 'BH', label: 'Bahrain', flag: 'ğŸ‡§ğŸ‡­' },
  { value: 'BD', label: 'Bangladesh', flag: 'ğŸ‡§ğŸ‡©' },
  { value: 'BB', label: 'Barbados', flag: 'ğŸ‡§ğŸ‡§' },
  { value: 'BY', label: 'Belarus', flag: 'ğŸ‡§ğŸ‡¾' },
  { value: 'BE', label: 'Belgium', flag: 'ğŸ‡§ğŸ‡ª' },
  { value: 'BZ', label: 'Belize', flag: 'ğŸ‡§ğŸ‡¿' },
  { value: 'BJ', label: 'Benin', flag: 'ğŸ‡§ğŸ‡¯' },
  { value: 'BM', label: 'Bermuda', flag: 'ğŸ‡§ğŸ‡²' },
  { value: 'BT', label: 'Bhutan', flag: 'ğŸ‡§ğŸ‡¹' },
  { value: 'BO', label: 'Bolivia', flag: 'ğŸ‡§ğŸ‡´' },
  { value: 'BA', label: 'Bosnia and Herzegovina', flag: 'ğŸ‡§ğŸ‡¦' },
  { value: 'BW', label: 'Botswana', flag: 'ğŸ‡§ğŸ‡¼' },
  { value: 'BR', label: 'Brazil', flag: 'ğŸ‡§ğŸ‡·' },
  { value: 'IO', label: 'British Indian Ocean Territory', flag: 'ğŸ‡®ğŸ‡´' },
  { value: 'BN', label: 'Brunei', flag: 'ğŸ‡§ğŸ‡³' },
  { value: 'BG', label: 'Bulgaria', flag: 'ğŸ‡§ğŸ‡¬' },
  { value: 'BF', label: 'Burkina Faso', flag: 'ğŸ‡§ğŸ‡«' },
  { value: 'BI', label: 'Burundi', flag: 'ğŸ‡§ğŸ‡®' },
  { value: 'CV', label: 'Cabo Verde', flag: 'ğŸ‡¨ğŸ‡»' },
  { value: 'KH', label: 'Cambodia', flag: 'ğŸ‡°ğŸ‡­' },
  { value: 'CM', label: 'Cameroon', flag: 'ğŸ‡¨ğŸ‡²' },
  { value: 'CA', label: 'Canada', flag: 'ğŸ‡¨ğŸ‡¦' },
  { value: 'KY', label: 'Cayman Islands', flag: 'ğŸ‡°ğŸ‡¾' },
  { value: 'CF', label: 'Central African Republic', flag: 'ğŸ‡¨ğŸ‡«' },
  { value: 'TD', label: 'Chad', flag: 'ğŸ‡¹ğŸ‡©' },
  { value: 'CL', label: 'Chile', flag: 'ğŸ‡¨ğŸ‡±' },
  { value: 'CN', label: 'China', flag: 'ğŸ‡¨ğŸ‡³' },
  { value: 'CX', label: 'Christmas Island', flag: 'ğŸ‡¨ğŸ‡½' },
  { value: 'CC', label: 'Cocos Islands', flag: 'ğŸ‡¨ğŸ‡¨' },
  { value: 'CO', label: 'Colombia', flag: 'ğŸ‡¨ğŸ‡´' },
  { value: 'KM', label: 'Comoros', flag: 'ğŸ‡°ğŸ‡²' },
  { value: 'CG', label: 'Congo', flag: 'ğŸ‡¨ğŸ‡¬' },
  { value: 'CD', label: 'Congo (Democratic Republic)', flag: 'ğŸ‡¨ğŸ‡©' },
  { value: 'CK', label: 'Cook Islands', flag: 'ğŸ‡¨ğŸ‡°' },
  { value: 'CR', label: 'Costa Rica', flag: 'ğŸ‡¨ğŸ‡·' },
  { value: 'CI', label: 'CÃ´te d\'Ivoire', flag: 'ğŸ‡¨ğŸ‡®' },
  { value: 'HR', label: 'Croatia', flag: 'ğŸ‡­ğŸ‡·' },
  { value: 'CU', label: 'Cuba', flag: 'ğŸ‡¨ğŸ‡º' },
  { value: 'CW', label: 'CuraÃ§ao', flag: 'ğŸ‡¨ğŸ‡¼' },
  { value: 'CY', label: 'Cyprus', flag: 'ğŸ‡¨ğŸ‡¾' },
  { value: 'CZ', label: 'Czech Republic', flag: 'ğŸ‡¨ğŸ‡¿' },
  { value: 'DK', label: 'Denmark', flag: 'ğŸ‡©ğŸ‡°' },
  { value: 'DJ', label: 'Djibouti', flag: 'ğŸ‡©ğŸ‡¯' },
  { value: 'DM', label: 'Dominica', flag: 'ğŸ‡©ğŸ‡²' },
  { value: 'DO', label: 'Dominican Republic', flag: 'ğŸ‡©ğŸ‡´' },
  { value: 'EC', label: 'Ecuador', flag: 'ğŸ‡ªğŸ‡¨' },
  { value: 'EG', label: 'Egypt', flag: 'ğŸ‡ªğŸ‡¬' },
  { value: 'SV', label: 'El Salvador', flag: 'ğŸ‡¸ğŸ‡»' },
  { value: 'GQ', label: 'Equatorial Guinea', flag: 'ğŸ‡¬ğŸ‡¶' },
  { value: 'ER', label: 'Eritrea', flag: 'ğŸ‡ªğŸ‡·' },
  { value: 'EE', label: 'Estonia', flag: 'ğŸ‡ªğŸ‡ª' },
  { value: 'SZ', label: 'Eswatini', flag: 'ğŸ‡¸ğŸ‡¿' },
  { value: 'ET', label: 'Ethiopia', flag: 'ğŸ‡ªğŸ‡¹' },
  { value: 'FK', label: 'Falkland Islands', flag: 'ğŸ‡«ğŸ‡°' },
  { value: 'FO', label: 'Faroe Islands', flag: 'ğŸ‡«ğŸ‡´' },
  { value: 'FJ', label: 'Fiji', flag: 'ğŸ‡«ğŸ‡¯' },
  { value: 'FI', label: 'Finland', flag: 'ğŸ‡«ğŸ‡®' },
  { value: 'FR', label: 'France', flag: 'ğŸ‡«ğŸ‡·' },
  { value: 'GF', label: 'French Guiana', flag: 'ğŸ‡¬ğŸ‡«' },
  { value: 'PF', label: 'French Polynesia', flag: 'ğŸ‡µğŸ‡«' },
  { value: 'GA', label: 'Gabon', flag: 'ğŸ‡¬ğŸ‡¦' },
  { value: 'GM', label: 'Gambia', flag: 'ğŸ‡¬ğŸ‡²' },
  { value: 'GE', label: 'Georgia', flag: 'ğŸ‡¬ğŸ‡ª' },
  { value: 'DE', label: 'Germany', flag: 'ğŸ‡©ğŸ‡ª' },
  { value: 'GH', label: 'Ghana', flag: 'ğŸ‡¬ğŸ‡­' },
  { value: 'GI', label: 'Gibraltar', flag: 'ğŸ‡¬ğŸ‡®' },
  { value: 'GR', label: 'Greece', flag: 'ğŸ‡¬ğŸ‡·' },
  { value: 'GL', label: 'Greenland', flag: 'ğŸ‡¬ğŸ‡±' },
  { value: 'GD', label: 'Grenada', flag: 'ğŸ‡¬ğŸ‡©' },
  { value: 'GP', label: 'Guadeloupe', flag: 'ğŸ‡¬ğŸ‡µ' },
  { value: 'GU', label: 'Guam', flag: 'ğŸ‡¬ğŸ‡º' },
  { value: 'GT', label: 'Guatemala', flag: 'ğŸ‡¬ğŸ‡¹' },
  { value: 'GG', label: 'Guernsey', flag: 'ğŸ‡¬ğŸ‡¬' },
  { value: 'GN', label: 'Guinea', flag: 'ğŸ‡¬ğŸ‡³' },
  { value: 'GW', label: 'Guinea-Bissau', flag: 'ğŸ‡¬ğŸ‡¼' },
  { value: 'GY', label: 'Guyana', flag: 'ğŸ‡¬ğŸ‡¾' },
  { value: 'HT', label: 'Haiti', flag: 'ğŸ‡­ğŸ‡¹' },
  { value: 'VA', label: 'Holy See', flag: 'ğŸ‡»ğŸ‡¦' },
  { value: 'HN', label: 'Honduras', flag: 'ğŸ‡­ğŸ‡³' },
  { value: 'HK', label: 'Hong Kong', flag: 'ğŸ‡­ğŸ‡°' },
  { value: 'HU', label: 'Hungary', flag: 'ğŸ‡­ğŸ‡º' },
  { value: 'IS', label: 'Iceland', flag: 'ğŸ‡®ğŸ‡¸' },
  { value: 'IN', label: 'India', flag: 'ğŸ‡®ğŸ‡³' },
  { value: 'ID', label: 'Indonesia', flag: 'ğŸ‡®ğŸ‡©' },
  { value: 'IR', label: 'Iran', flag: 'ğŸ‡®ğŸ‡·' },
  { value: 'IQ', label: 'Iraq', flag: 'ğŸ‡®ğŸ‡¶' },
  { value: 'IE', label: 'Ireland', flag: 'ğŸ‡®ğŸ‡ª' },
  { value: 'IM', label: 'Isle of Man', flag: 'ğŸ‡®ğŸ‡²' },
  { value: 'IL', label: 'Israel', flag: 'ğŸ‡®ğŸ‡±' },
  { value: 'IT', label: 'Italy', flag: 'ğŸ‡®ğŸ‡¹' },
  { value: 'JM', label: 'Jamaica', flag: 'ğŸ‡¯ğŸ‡²' },
  { value: 'JP', label: 'Japan', flag: 'ğŸ‡¯ğŸ‡µ' },
  { value: 'JE', label: 'Jersey', flag: 'ğŸ‡¯ğŸ‡ª' },
  { value: 'JO', label: 'Jordan', flag: 'ğŸ‡¯ğŸ‡´' },
  { value: 'KZ', label: 'Kazakhstan', flag: 'ğŸ‡°ğŸ‡¿' },
  { value: 'KE', label: 'Kenya', flag: 'ğŸ‡°ğŸ‡ª' },
  { value: 'KI', label: 'Kiribati', flag: 'ğŸ‡°ğŸ‡®' },
  { value: 'KP', label: 'Korea (North)', flag: 'ğŸ‡°ğŸ‡µ' },
  { value: 'KR', label: 'Korea (South)', flag: 'ğŸ‡°ğŸ‡·' },
  { value: 'KW', label: 'Kuwait', flag: 'ğŸ‡°ğŸ‡¼' },
  { value: 'KG', label: 'Kyrgyzstan', flag: 'ğŸ‡°ğŸ‡¬' },
  { value: 'LA', label: 'Laos', flag: 'ğŸ‡±ğŸ‡¦' },
  { value: 'LV', label: 'Latvia', flag: 'ğŸ‡±ğŸ‡»' },
  { value: 'LB', label: 'Lebanon', flag: 'ğŸ‡±ğŸ‡§' },
  { value: 'LS', label: 'Lesotho', flag: 'ğŸ‡±ğŸ‡¸' },
  { value: 'LR', label: 'Liberia', flag: 'ğŸ‡±ğŸ‡·' },
  { value: 'LY', label: 'Libya', flag: 'ğŸ‡±ğŸ‡¾' },
  { value: 'LI', label: 'Liechtenstein', flag: 'ğŸ‡±ğŸ‡®' },
  { value: 'LT', label: 'Lithuania', flag: 'ğŸ‡±ğŸ‡¹' },
  { value: 'LU', label: 'Luxembourg', flag: 'ğŸ‡±ğŸ‡º' },
  { value: 'MO', label: 'Macao', flag: 'ğŸ‡²ğŸ‡´' },
  { value: 'MK', label: 'Macedonia', flag: 'ğŸ‡²ğŸ‡°' },
  { value: 'MG', label: 'Madagascar', flag: 'ğŸ‡²ğŸ‡¬' },
  { value: 'MW', label: 'Malawi', flag: 'ğŸ‡²ğŸ‡¼' },
  { value: 'MY', label: 'Malaysia', flag: 'ğŸ‡²ğŸ‡¾' },
  { value: 'MV', label: 'Maldives', flag: 'ğŸ‡²ğŸ‡»' },
  { value: 'ML', label: 'Mali', flag: 'ğŸ‡²ğŸ‡±' },
  { value: 'MT', label: 'Malta', flag: 'ğŸ‡²ğŸ‡¹' },
  { value: 'MH', label: 'Marshall Islands', flag: 'ğŸ‡²ğŸ‡­' },
  { value: 'MQ', label: 'Martinique', flag: 'ğŸ‡²ğŸ‡¶' },
  { value: 'MR', label: 'Mauritania', flag: 'ğŸ‡²ğŸ‡·' },
  { value: 'MU', label: 'Mauritius', flag: 'ğŸ‡²ğŸ‡º' },
  { value: 'YT', label: 'Mayotte', flag: 'ğŸ‡¾ğŸ‡¹' },
  { value: 'MX', label: 'Mexico', flag: 'ğŸ‡²ğŸ‡½' },
  { value: 'FM', label: 'Micronesia', flag: 'ğŸ‡«ğŸ‡²' },
  { value: 'MD', label: 'Moldova', flag: 'ğŸ‡²ğŸ‡©' },
  { value: 'MC', label: 'Monaco', flag: 'ğŸ‡²ğŸ‡¨' },
  { value: 'MN', label: 'Mongolia', flag: 'ğŸ‡²ğŸ‡³' },
  { value: 'ME', label: 'Montenegro', flag: 'ğŸ‡²ğŸ‡ª' },
  { value: 'MS', label: 'Montserrat', flag: 'ğŸ‡²ğŸ‡¸' },
  { value: 'MA', label: 'Morocco', flag: 'ğŸ‡²ğŸ‡¦' },
  { value: 'MZ', label: 'Mozambique', flag: 'ğŸ‡²ğŸ‡¿' },
  { value: 'MM', label: 'Myanmar', flag: 'ğŸ‡²ğŸ‡²' },
  { value: 'NA', label: 'Namibia', flag: 'ğŸ‡³ğŸ‡¦' },
  { value: 'NR', label: 'Nauru', flag: 'ğŸ‡³ğŸ‡·' },
  { value: 'NP', label: 'Nepal', flag: 'ğŸ‡³ğŸ‡µ' },
  { value: 'NL', label: 'Netherlands', flag: 'ğŸ‡³ğŸ‡±' },
  { value: 'NC', label: 'New Caledonia', flag: 'ğŸ‡³ğŸ‡¨' },
  { value: 'NZ', label: 'New Zealand', flag: 'ğŸ‡³ğŸ‡¿' },
  { value: 'NI', label: 'Nicaragua', flag: 'ğŸ‡³ğŸ‡®' },
  { value: 'NE', label: 'Niger', flag: 'ğŸ‡³ğŸ‡ª' },
  { value: 'NG', label: 'Nigeria', flag: 'ğŸ‡³ğŸ‡¬' },
  { value: 'NU', label: 'Niue', flag: 'ğŸ‡³ğŸ‡º' },
  { value: 'NF', label: 'Norfolk Island', flag: 'ğŸ‡³ğŸ‡«' },
  { value: 'MP', label: 'Northern Mariana Islands', flag: 'ğŸ‡²ğŸ‡µ' },
  { value: 'NO', label: 'Norway', flag: 'ğŸ‡³ğŸ‡´' },
  { value: 'OM', label: 'Oman', flag: 'ğŸ‡´ğŸ‡²' },
  { value: 'PK', label: 'Pakistan', flag: 'ğŸ‡µğŸ‡°' },
  { value: 'PW', label: 'Palau', flag: 'ğŸ‡µğŸ‡¼' },
  { value: 'PS', label: 'Palestine', flag: 'ğŸ‡µğŸ‡¸' },
  { value: 'PA', label: 'Panama', flag: 'ğŸ‡µğŸ‡¦' },
  { value: 'PG', label: 'Papua New Guinea', flag: 'ğŸ‡µğŸ‡¬' },
  { value: 'PY', label: 'Paraguay', flag: 'ğŸ‡µğŸ‡¾' },
  { value: 'PE', label: 'Peru', flag: 'ğŸ‡µğŸ‡ª' },
  { value: 'PH', label: 'Philippines', flag: 'ğŸ‡µğŸ‡­' },
  { value: 'PN', label: 'Pitcairn', flag: 'ğŸ‡µğŸ‡³' },
  { value: 'PL', label: 'Poland', flag: 'ğŸ‡µğŸ‡±' },
  { value: 'PT', label: 'Portugal', flag: 'ğŸ‡µğŸ‡¹' },
  { value: 'PR', label: 'Puerto Rico', flag: 'ğŸ‡µğŸ‡·' },
  { value: 'QA', label: 'Qatar', flag: 'ğŸ‡¶ğŸ‡¦' },
  { value: 'RE', label: 'RÃ©union', flag: 'ğŸ‡·ğŸ‡ª' },
  { value: 'RO', label: 'Romania', flag: 'ğŸ‡·ğŸ‡´' },
  { value: 'RU', label: 'Russia', flag: 'ğŸ‡·ğŸ‡º' },
  { value: 'RW', label: 'Rwanda', flag: 'ğŸ‡·ğŸ‡¼' },
  { value: 'BL', label: 'Saint BarthÃ©lemy', flag: 'ğŸ‡§ğŸ‡±' },
  { value: 'SH', label: 'Saint Helena', flag: 'ğŸ‡¸ğŸ‡­' },
  { value: 'KN', label: 'Saint Kitts and Nevis', flag: 'ğŸ‡°ğŸ‡³' },
  { value: 'LC', label: 'Saint Lucia', flag: 'ğŸ‡±ğŸ‡¨' },
  { value: 'MF', label: 'Saint Martin', flag: 'ğŸ‡²ğŸ‡«' },
  { value: 'PM', label: 'Saint Pierre and Miquelon', flag: 'ğŸ‡µğŸ‡²' },
  { value: 'VC', label: 'Saint Vincent and the Grenadines', flag: 'ğŸ‡»ğŸ‡¨' },
  { value: 'WS', label: 'Samoa', flag: 'ğŸ‡¼ğŸ‡¸' },
  { value: 'SM', label: 'San Marino', flag: 'ğŸ‡¸ğŸ‡²' },
  { value: 'ST', label: 'SÃ£o TomÃ© and PrÃ­ncipe', flag: 'ğŸ‡¸ğŸ‡¹' },
  { value: 'SA', label: 'Saudi Arabia', flag: 'ğŸ‡¸ğŸ‡¦' },
  { value: 'SN', label: 'Senegal', flag: 'ğŸ‡¸ğŸ‡³' },
  { value: 'RS', label: 'Serbia', flag: 'ğŸ‡·ğŸ‡¸' },
  { value: 'SC', label: 'Seychelles', flag: 'ğŸ‡¸ğŸ‡¨' },
  { value: 'SL', label: 'Sierra Leone', flag: 'ğŸ‡¸ğŸ‡±' },
  { value: 'SG', label: 'Singapore', flag: 'ğŸ‡¸ğŸ‡¬' },
  { value: 'SX', label: 'Sint Maarten', flag: 'ğŸ‡¸ğŸ‡½' },
  { value: 'SK', label: 'Slovakia', flag: 'ğŸ‡¸ğŸ‡°' },
  { value: 'SI', label: 'Slovenia', flag: 'ğŸ‡¸ğŸ‡®' },
  { value: 'SB', label: 'Solomon Islands', flag: 'ğŸ‡¸ğŸ‡§' },
  { value: 'SO', label: 'Somalia', flag: 'ğŸ‡¸ğŸ‡´' },
  { value: 'ZA', label: 'South Africa', flag: 'ğŸ‡¿ğŸ‡¦' },
  { value: 'GS', label: 'South Georgia', flag: 'ğŸ‡¬ğŸ‡¸' },
  { value: 'SS', label: 'South Sudan', flag: 'ğŸ‡¸ğŸ‡¸' },
  { value: 'ES', label: 'Spain', flag: 'ğŸ‡ªğŸ‡¸' },
  { value: 'LK', label: 'Sri Lanka', flag: 'ğŸ‡±ğŸ‡°' },
  { value: 'SD', label: 'Sudan', flag: 'ğŸ‡¸ğŸ‡©' },
  { value: 'SR', label: 'Suriname', flag: 'ğŸ‡¸ğŸ‡·' },
  { value: 'SJ', label: 'Svalbard and Jan Mayen', flag: 'ğŸ‡¸ğŸ‡¯' },
  { value: 'SE', label: 'Sweden', flag: 'ğŸ‡¸ğŸ‡ª' },
  { value: 'CH', label: 'Switzerland', flag: 'ğŸ‡¨ğŸ‡­' },
  { value: 'SY', label: 'Syria', flag: 'ğŸ‡¸ğŸ‡¾' },
  { value: 'TW', label: 'Taiwan', flag: 'ğŸ‡¹ğŸ‡¼' },
  { value: 'TJ', label: 'Tajikistan', flag: 'ğŸ‡¹ğŸ‡¯' },
  { value: 'TZ', label: 'Tanzania', flag: 'ğŸ‡¹ğŸ‡¿' },
  { value: 'TH', label: 'Thailand', flag: 'ğŸ‡¹ğŸ‡­' },
  { value: 'TL', label: 'Timor-Leste', flag: 'ğŸ‡¹ğŸ‡±' },
  { value: 'TG', label: 'Togo', flag: 'ğŸ‡¹ğŸ‡¬' },
  { value: 'TK', label: 'Tokelau', flag: 'ğŸ‡¹ğŸ‡°' },
  { value: 'TO', label: 'Tonga', flag: 'ğŸ‡¹ğŸ‡´' },
  { value: 'TT', label: 'Trinidad and Tobago', flag: 'ğŸ‡¹ğŸ‡¹' },
  { value: 'TN', label: 'Tunisia', flag: 'ğŸ‡¹ğŸ‡³' },
  { value: 'TR', label: 'Turkey', flag: 'ğŸ‡¹ğŸ‡·' },
  { value: 'TM', label: 'Turkmenistan', flag: 'ğŸ‡¹ğŸ‡²' },
  { value: 'TC', label: 'Turks and Caicos Islands', flag: 'ğŸ‡¹ğŸ‡¨' },
  { value: 'TV', label: 'Tuvalu', flag: 'ğŸ‡¹ğŸ‡»' },
  { value: 'UG', label: 'Uganda', flag: 'ğŸ‡ºğŸ‡¬' },
  { value: 'UA', label: 'Ukraine', flag: 'ğŸ‡ºğŸ‡¦' },
  { value: 'AE', label: 'United Arab Emirates', flag: 'ğŸ‡¦ğŸ‡ª' },
  { value: 'GB', label: 'United Kingdom', flag: 'ğŸ‡¬ğŸ‡§' },
  { value: 'US', label: 'United States', flag: 'ğŸ‡ºğŸ‡¸' },
  { value: 'UM', label: 'United States Minor Outlying Islands', flag: 'ğŸ‡ºğŸ‡²' },
  { value: 'UY', label: 'Uruguay', flag: 'ğŸ‡ºğŸ‡¾' },
  { value: 'UZ', label: 'Uzbekistan', flag: 'ğŸ‡ºğŸ‡¿' },
  { value: 'VU', label: 'Vanuatu', flag: 'ğŸ‡»ğŸ‡º' },
  { value: 'VE', label: 'Venezuela', flag: 'ğŸ‡»ğŸ‡ª' },
  { value: 'VN', label: 'Vietnam', flag: 'ğŸ‡»ğŸ‡³' },
  { value: 'VG', label: 'Virgin Islands (British)', flag: 'ğŸ‡»ğŸ‡¬' },
  { value: 'VI', label: 'Virgin Islands (U.S.)', flag: 'ğŸ‡»ğŸ‡®' },
  { value: 'WF', label: 'Wallis and Futuna', flag: 'ğŸ‡¼ğŸ‡«' },
  { value: 'EH', label: 'Western Sahara', flag: 'ğŸ‡ªğŸ‡­' },
  { value: 'YE', label: 'Yemen', flag: 'ğŸ‡¾ğŸ‡ª' },
  { value: 'ZM', label: 'Zambia', flag: 'ğŸ‡¿ğŸ‡²' },
  { value: 'ZW', label: 'Zimbabwe', flag: 'ğŸ‡¿ğŸ‡¼' }
];

const CountryDropdown: React.FC<CountryDropdownProps> = ({
  value,
  onChange,
  className = '',
  error = false
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [dropdownPosition, setDropdownPosition] = useState({ 
    top: 0, 
    left: 0, 
    width: 0, 
    maxHeight: 200, 
    flipUp: false 
  });
  const buttonRef = useRef<HTMLButtonElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const calculateDropdownPosition = () => {
    if (!buttonRef.current) return { top: 0, left: 0, width: 0, maxHeight: 200, flipUp: false };

    const buttonRect = buttonRef.current.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    const dropdownHeight = Math.min(240, countries.length * 40);
    
    const spaceBelow = viewportHeight - buttonRect.bottom;
    const spaceAbove = buttonRect.top;
    const flipUp = spaceBelow < dropdownHeight && spaceAbove > spaceBelow;
    
    const maxHeight = flipUp ? Math.min(spaceAbove - 10, 240) : Math.min(spaceBelow - 10, 240);
    
    return {
      top: buttonRect.bottom,
      left: buttonRect.left,
      width: buttonRect.width,
      maxHeight,
      flipUp
    };
  };

  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      
      if (isOpen) {
        if (!buttonRef.current?.contains(target) && !dropdownRef.current?.contains(target)) {
          setIsOpen(false);
        }
      }
    };

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    document.addEventListener('keydown', handleEscape);
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen]);

  const handleToggle = () => {
    if (!isOpen) {
      const position = calculateDropdownPosition();
      setDropdownPosition(position);
    }
    setIsOpen(!isOpen);
  };

  const handleSelect = (selectedValue: string) => {
    onChange(selectedValue);
    setIsOpen(false);
  };

  const selectedCountry = countries.find(country => country.value === value);
  const displayValue = selectedCountry ? selectedCountry.label : 'Select a country';

  return (
    <>
      <div className={`relative ${className}`}>
        <button
          ref={buttonRef}
          type="button"
          onClick={handleToggle}
          className={`w-full px-3 py-2 border rounded-md text-left focus:outline-none focus:ring-2 focus:ring-indigo-500 flex items-center justify-between transition-colors bg-white cursor-pointer ${
            error ? 'border-red-500' : 'border-gray-300'
          }`}
        >
          <div className="flex items-center gap-2">
            {selectedCountry?.flag && (
              <span className="text-sm">{selectedCountry.flag}</span>
            )}
            <span className={value ? 'text-gray-900' : 'text-gray-500'}>
              {displayValue}
            </span>
          </div>
          <ChevronDown 
            className={`w-4 h-4 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`}
          />
        </button>
      </div>

      {isOpen && (
        <div 
          ref={dropdownRef}
          className="fixed z-[70] bg-white border border-gray-300 rounded-lg shadow-lg overflow-y-auto"
          style={{
            top: dropdownPosition.flipUp 
              ? dropdownPosition.top - dropdownPosition.maxHeight - 4
              : dropdownPosition.top + 4,
            left: dropdownPosition.left,
            width: dropdownPosition.width,
            maxHeight: dropdownPosition.maxHeight
          }}
        >
          {countries.map((country) => (
            <button
              key={country.value}
              type="button"
              onClick={(e) => {
                e.stopPropagation();
                handleSelect(country.value);
              }}
              className={`w-full px-4 py-2 text-left hover:bg-gray-50 flex items-center gap-2 transition-colors cursor-pointer first:rounded-t-lg last:rounded-b-lg ${
                value === country.value ? 'bg-indigo-50 text-indigo-600' : 'text-gray-900'
              }`}
            >
              {country.flag && (
                <span className="text-sm">{country.flag}</span>
              )}
              <span>{country.label}</span>
            </button>
          ))}
        </div>
      )}
    </>
  );
};

export default CountryDropdown;